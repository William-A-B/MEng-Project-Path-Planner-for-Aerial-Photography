% Latitude and Longitude vectors
latitudes = [53.945090046160715, 53.94493218168469, 53.94488797952434, ...
             53.944925867093225, 53.94516582089698, 53.94521166341858, ...
             53.94536321231161, 53.94554949040495, 53.94561894982003, ...
             53.94573576766636, 53.94601991781872, 53.94625355093829, ...
             53.946382995751954, 53.94653769756327, 53.94671449893076, ...
             53.94690392813571, 53.94705862801489, 53.94736802605188, ...
             53.94763637963348, 53.94769636431561, 53.94764900799479, ...
             53.947645850904806, 53.94775428279724, 53.94788372295341, ...
             53.94788372295341, 53.94778269652447, 53.947678512763325, ...
             53.94751434388429, 53.94731952826091, 53.94710800103376, ...
             53.94691541561039, 53.946779658138254, 53.946652765482575, ...
             53.94670643725742, 53.946886395057334, 53.94706635208081, ...
             53.94673800885743, 53.94656436476166, 53.946346519328266, ...
             53.946188659607586, 53.94598344107751, 53.94586030947482, ...
             53.94580663661116, 53.94586030947482, 53.94587925282196, ...
             53.9456771089644, 53.945658165525444, 53.94580024110791, ...
             53.94579076941748, 53.94560764964616, 53.94551608945903, ...
             53.94538664195498, 53.94528876674618];

longitudes = [-1.032192245176475, -1.0312802941114114, -1.0303039700299905, ...
              -1.0295851380139993, -1.0285577848805474, -1.028101703974528, ...
              -1.0278120254009195, -1.0276403640239664, -1.0271369555247816, ...
              -1.0264342167628797, -1.025854859615663, -1.0252439096171315, ...
              -1.0247503831583913, -1.0242729499537404, -1.0236721351344045, ...
              -1.022957982765547, -1.0224269053805983, -1.0220943114627516, ...
              -1.0220406672824538, -1.0224161765445388, -1.0231993815768874, ...
              -1.0236545261683148, -1.0238798317255657, -1.0241909679712933, ...
              -1.0244109091105145, -1.0245128330530804, -1.0245664772333782, ...
              -1.024646943503825, -1.0247805756327182, -1.0250273388620883, ...
              -1.0254994076487094, -1.0259285610910922, -1.0267202207656396, ...
              -1.0273800138064075, -1.027744794232433, -1.0283134225435901, ...
              -1.0287854913302112, -1.0288605931826282, -1.0288552287645985, ...
              -1.028914237362926, -1.0290537122317005, -1.0292092803545643, ...
              -1.0297030070408368, -1.0301536181553388, -1.0304379323109174, ...
              -1.0309640859220792, -1.0313986037824918, -1.0316078160856534, ...
              -1.0318384860609342, -1.0320101474378873, -1.0319296811674405, ...
              -1.0319028590772916, -1.032042333946066];

% create figure and plot polygon using geoplot
figure;
geoplot(latitudes, longitudes, '-b', 'linewidth', 1.5);
hold on;
geoscatter(latitudes, longitudes, 'ro'); % plot vertices as red markers

% customize plot
title('polygon plot from coordinates');
geolimits([min(latitudes) max(latitudes)], [min(longitudes) max(longitudes)]);
show(figure)
hold off;


ss = stateSpaceSE2;
sv = validatorOccupancyMap(ss);

load exampleMaps
map = occupancyMap(simpleMap,10);
sv.Map = map;

sv.ValidationDistance = 0.01;

ss.StateBounds = [map.XWorldLimits;map.YWorldLimits;[-pi pi]];

planner = plannerRRT(ss, sv, MaxConnectionDistance=0.3);

% Define Start and Goal Points
% start = [53.945, -1.032];
% goal = [53.947, -1.022];
start = [0.5 0.5 0];
goal = [2.5 0.2 0];

rng(100,'twister'); % for repeatable result
[pthObj,solnInfo] = plan(planner,start,goal);

show(map)
hold on
% Tree expansion
plot(solnInfo.TreeData(:,1),solnInfo.TreeData(:,2),'.-')
% Draw path
plot(pthObj.States(:,1),pthObj.States(:,2),'r-','LineWidth',2)